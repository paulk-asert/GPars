// GPars - Groovy Parallel Systems
//
// Copyright © 2008–2011  The original author or authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//  Author: Václav Pech
//  Author: Russel Winder
//  Author: Dierk König
//  Author: Hans Dockter
//  Author: Rene Groeschke
//  Author: Hamlet D'Arcy - Updated OSGi configuration

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'osgi'

//apply plugin: 'code-quality'

apply plugin: 'eclipse'
apply plugin: 'idea'

defaultTasks 'test'
archivesBaseName = 'gpars'
group = 'org.codehaus.gpars'
version = '1.0-SNAPSHOT'
bundleVersion = version

sourceCompatibility = 5
targetCompatibility = 5

def theVendor = 'gpars.org'
def theTitle = 'GPars: Groovy Parallel Systems'

apply {
    from 'gradle/docs.gradle'
    from 'gradle/docsDependencies.gradle'
}

jar {
    manifest {
        name = 'gpars'
        version = this.version
        symbolicName = 'gpars.org'
        instruction 'Bundle-Vendor', theVendor
        instruction 'Bundle-Description', group
        instruction 'Bundle-DocURL', 'http://gpars.codehaus.org'
        instruction 'Built-By', System.properties.'user.name'
        instruction 'Extension-Name', archivesBaseName
        instruction 'Specification-Title', theTitle
        instruction 'Specification-Version', version
        instruction 'Specification-Vendor', theVendor
        instruction 'Implementation-Title', theTitle
        instruction 'Implementation-Version', version
        instruction 'Implementation-Vendor', theVendor
        instruction 'provider', theVendor
        instruction 'Export-Package', "*;version=${version}"
        instruction 'Import-Package', '*;resolution:=optional'
        instruction '-removeheaders', 'Bnd-LastModified'
    }
}

repositories {
    mavenCentral()
    mavenRepo url: 'http://repository.jboss.org/maven2'
    mavenRepo url: 'http://repository.codehaus.org'
    mavenRepo url: 'http://snapshots.repository.codehaus.org'
    mavenRepo url: 'http://download.java.net/maven/2'
    //  Needed for using Spock snapshots.
    mavenRepo url: 'http://m2repo.spockframework.org/snapshots'
    //  To get the latest Grails-Doc.
    mavenRepo url: 'http://repo.grails.org/grails/core'
}

configurations {
    deployerJars
    docs
    cover
}

// NB If hasProperty is evaluated at the top level of the script, the method associated with the Project
// instance is called, and everything works as expected.  When executed without qualification in the context
// of the dependencies Closure then the hasProperties associated with the DependencyHandler instance is
// called -- and so the test appears to fail unexpectedly as the properties are not defined in that context.
// We must therefore be explicit about evaluating the hasProperty of the Project instance.  Thanks to
// Ladislav Thon for pointing this out on the Gradle Developer email list.  The only question is why the
// symbol look up works correctly without qualification.

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy-all', version: project.hasProperty('gpars_groovyVersion') ? gpars_groovyVersion : '1.8.4'
    testCompile group: 'junit', name: 'junit', version: project.hasProperty('gpars_junitVersion') ? gpars_junitVersion : '4.10'
    testCompile group: 'org.spockframework', name: 'spock-core', version: project.hasProperty('gpars_spockVersion') ? gpars_spockVersion : '0.5-groovy-1.8'
    compile 'org.codehaus.jsr166-mirror:jsr166y:1.7.0'
    compile 'org.codehaus.jsr166-mirror:extra166y:1.7.0'
    compile 'org.multiverse:multiverse-beta:0.7-RC-1'
    compile group: 'org.jboss.netty', name: 'netty', version: project.hasProperty('gpars_nettyVersion') ? gpars_nettyVersion : '3.1.5.GA'
    compile 'org.codehaus.jcsp:jcsp:1.1-rc5'
    docs grailsDocs
    docs radeox
    docs lowagieItext
    docs 'org.slf4j:slf4j-api:1.6.2'
    docs 'org.slf4j:slf4j-simple:1.6.2' // Needed by Grails-Doc 2.0.0.M1
    docs xhtmlRenderer
    docs 'commons-logging:commons-logging:1.1.1'
    //deployerJars 'org.apache.maven.wagon:wagon-webdav-jackrabbit:1.0-beta-7'
    //deployerJars "org.apache.maven.wagon:wagon-http:1.0-beta-6"
    deployerJars "org.apache.maven.wagon:wagon-http-lightweight:1.0-beta-6"
    cover 'net.sourceforge.cobertura:cobertura:1.9.4.1'
    testRuntime 'net.sourceforge.cobertura:cobertura:1.9.4.1'
}

//  To get the details of the "unchecked" issues.
compileGroovy.options.compilerArgs = ['-Xlint']

[compileGroovy, compileTestGroovy]*.groovyOptions*.fork(memoryInitialSize: '128M', memoryMaximumSize: '320M')

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(":release") && version.contains("SNAPSHOT")) {
        throw (new StopExecutionException("You should not release a snapshot version! We're Stopping the build!"))
    }
    if (taskGraph.hasTask(':test') && taskGraph.hasTask(':withCoverage')) {
        new Coverage(this).setup()
    }
}

task release(dependsOn: ['build']) << {
    println 'We release now'
}

task withCoverage { // only here such that it can be put on the command line for enabling coverage
    description = 'Prepare the test task to use code coverage if needed.'
}

test {
    forkEvery = 600
    maxParallelForks = hasProperty('gpars_maxTestForks') ? gpars_maxTestForks : 1
    exclude '**/integration/**/*.*'
}

task integrationTest(type: Test, dependsOn: 'test') {
    include '**/integration/**/*.*'
}

// codenarc configuration
codeNarcConfigFileName = "./config/codenarc/codenarc.groovy"
task checkstyleMain(overwrite: true) << {};
task checkstyleTest(overwrite: true) << {};
// don't fail build on CodeNarc tasks
tasks.withType(CodeNarc).all { codeNarcTask ->
    codeNarcTask.ignoreFailures = true
}

//build.dependsOn integrationTest

if (!project.hasProperty('codehausUsername')) codehausUsername = ''
if (!project.hasProperty('codehausPassword')) codehausPassword = ''

uploadArchives {
    project.deployer = repositories.mavenDeployer {
        uniqueVersion = false
        configuration = configurations.deployerJars
        repository(url: 'https://dav.codehaus.org/repository/gpars/') {
            authentication(userName: codehausUsername, password: codehausPassword)
        }
        snapshotRepository(url: 'https://dav.codehaus.org/snapshots.repository/gpars/') {
            authentication(userName: codehausUsername, password: codehausPassword)
        }
        pom.project {
            name 'GPars'
            description 'The Groovy and Java high-level concurrency library offering actors, dataflow, CSP, agents, parallel collections, fork/join and more'
            url 'http://gpars.codehaus.org'
            inceptionYear '2009'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
        // In the future Gradle will allow to use dynamic props for dependencies to deal with optionals
        pom.whenConfigured {pom ->
            // dependency is a native Maven dependency object (With properties artifactId, groupId, ...)
            pom.dependencies.each {dependency ->
                if (dependency.artifactId in ['netty', 'jcsp', 'multiverse-beta']) {
                    dependency.optional = true
                }
            }
            // Remove test dependencies from all poms
            pom.dependencies.removeAll(pom.dependencies.findAll { it.scope == 'test' })
        }
    }
}

def titleForDocumentation = archivesBaseName + ' ' + version
def copyrightString = 'Copyright &#169; 2008&#8211;2011  V&#225;clav Pech.  All Rights Reserved.'
def packageTitle = group

javadoc {
    options.overview('overview.html')
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(titleForDocumentation)
    options.docTitle(titleForDocumentation)
    options.footer(copyrightString)

    doFirst {
        javadoc.title = titleForDocumentation
        javadoc.options.docTitle = javadoc.title
    }
}

groovydoc {
    dependsOn(classes)
    includePrivate = true
    use = true
    windowTitle = packageTitle
    docTitle = packageTitle
    header = packageTitle
    footer = copyrightString
    include 'groovyx/gpars/**'
    overview = new File('overview.html')
}

task documentation(dependsOn: ['javadoc', 'groovydoc', 'buildGuide', 'pdfGuide'], description: 'Create the API documentation.')

task zipDoc(type: Jar, dependsOn: 'documentation') {
    classifier = 'javadoc'
    from docsDir
}

task zipSrc(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives(zipSrc)
    archives(zipDoc)
}

task zipSamples(type: Zip) {
    appendix = 'samples'
    from sourceSets.test.allSource.matching {
        include 'groovyx/gpars/samples/**'
    }
}

task zipJavaDemo(type: Zip) {
    appendix = 'mvn-java-demo'
    from('java-demo') {
        include 'src/**'
        include 'pom.xml'
    }
}

task zipDist(type: Zip) {
    //get the main jar
    from jar.outputs.files

    // get the libs
    from('lib') {
        exclude('junit*', 'netty-3.1.5.GA-sources.jar', 'jcsp.jar', 'jcsp-demos-util.jar', 'spock-core*')
    }

    //get the license and notice files
    from('src/main/resources/META-INF/') {
        include('LICENSE.txt', 'NOTICE.txt')
    }

    appendix = 'all'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-5'
}

task demo(type: DemoTask, dependsOn: 'compileGroovy') {
    excludedDemos = [
            'DemoPotentialDeadlock',                      // may deadlock (on purpose)
            'DemoNonDeterministicDeadlockWithDataflows',  // may deadlock (on purpose)
            'DemoDeadLock',                               // deadlock (on purpose)
            'DemoRemote',                                 // doesn't work in an automated environment
            'DemoSwing',                                  // maybe we don't want these to run on the CI ..
            'DemoSwingMashup',                            // but they can be run locally
            'DemoSwingCollectionProcessing',
            'DemoSwingActors',
            'DemoSwingDataflowOperators',
            'DemoSwingFancyDataflow',                     // Shows UI
            'DemoSwingDataflowProgress',                  // Shows UI
            'DataflowDemo4',                              // Never stops
            'DemoWebPageProcessing',                      // Never stops
            'DemoWebPageProcessingWithCaching',           // Never stops
            'DemoMapReduce',                              // Relies on internet connection
            'DemoNumbers',                                //Never stops
            'FibonacciV1',                                //Never stops
            'FibonacciV2',                                //Never stops
            'DemoSieveEratosthenesCSP',                   //Never stops
            'DemoSieveEratosthenesTheGoWay',              //Never stops
            'DemoSieveEratosthenesTheGoWayWithOperators', //Never stops
            'DemoThreading',                              //Never stops
            'DemoProducerConsumer1',                      //Never stops
            'DemoPhysicalCalculations',                   //Needs user input
            'DemoFibonacci1',                             //Needs classes from its source folder
            'DemoFibonacci1WithSynchronousChannels',      //Needs classes from its source folder
            'DemoFibonacci2',                             //Needs classes from its source folder
            'DemoFibonacci2WithSynchronousChannels',      //Needs classes from its source folder
            'DemoNumbers',                                //Needs classes from its source folder
            'DemoNumbersWithSynchronousChannels',         //Needs classes from its source folder
            'DemoActor_4_4',                              //Specifies absolute paths
            'RunReset',                                   //Starts UI
            'DemoSwingMergeSort',                         //Starts UI
            'DemoVisualForkJoinMergeSort',                //Starts UI
            'DemoStm',                                    //Stm
            'DemoDirectStm',                              //Stm
            'DemoRetry',                                  //Stm
            'DemoCustomBlocks',                           //Stm
            'DemoLifeWithDataflowOperators',              //Interacts with the user
            'DemoSwingLifeWithDataflowOperators',         //Interacts with the user
    ]

    classpath = sourceSets.main.runtimeClasspath

    demoFiles = sourceSets.test.allGroovy.matching {
        include '**/*Demo*.groovy'
        exclude excludedDemos.collect {name -> "**/${name}.groovy" }
    }
}

idea {
    module {
        excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
        excludeDirs += file('.settings/') // Eclipse settings directory.
        excludeDirs += file('bin') // Eclipse compilation directory.
        excludeDirs += file('out') // IDEA compilation directory.
        excludeDirs += file('build') // Gradle compilation directory.
        excludeDirs += file('docs') // Jon's book directory
        excludeDirs += file('java-demo') // A separate module of a pure-java gpars usage
    }
    project {
        javaVersion = '1.6'
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
                vcsConfig.mapping[0].'@vcs' = 'Git'

                //Copy the inspection profiles as well as the spell-checker's dictionaries from the default project file
                def inspectionConfig = provider.asNode().component.find { it.'@name' == 'InspectionProjectProfileManager' }
                if (inspectionConfig) node.remove(inspectionConfig)
                def dictionaryConfig = provider.asNode().component.find { it.'@name' == 'ProjectDictionaryState' }
                if (dictionaryConfig) node.remove(dictionaryConfig)

                new File('GPars_IDEAX.ipr').withReader {reader ->
                    def project = new XmlParser().parse(reader)
                    def inspections = project.component.find {it.'@name' == 'InspectionProjectProfileManager'}
                    node.append(inspections)
                    def dictionaries = project.component.find {it.'@name' == 'ProjectDictionaryState'}
                    node.append(dictionaries)
                }

                def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
            }
            whenMerged { project ->
                project.jdk.languageLevel = 'JDK_1_6'
            }
        }
    }
}
